Command Line Tests
=======================================

1. We check for invalid files by calling
./soda nonExistentFile.config

This gives the output:
Error: could not open input file "nonExistentFile.config"

which is reasonable behaviour when the file is not accessible.

2. We check that placeholders are ignored in the argument list. We do this
by calling

./soda soda.config d 2

which runs the code correctly using multiple processors and the default seed.


3. Finally, we check that the rng seed is being set correctly. To do this,
we run

./soda soda.config 1
./soda soda.config 1
./soda soda.config 1
./soda soda.config 2

and verify that the output of the first three runs match, and the fourth run
is reasonably distinct from the other seed.



Algorithmic Tests
=======================================

We base all our configs on the provided sample config:

SodaCost				2	# Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents				2	# number of students to create
MaxPurchases			8	# maximum number of bottles a student purchases
NumVendingMachines		3	# number of vending machines
MaxStockPerFlavour		5	# maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour	3	# maximum number of bottles of each flavour generated by the bottling
							#    plant per production run
TimeBetweenShipments	3	# length of time between shipment pickup
GroupoffDelay			10	# length of time between initializing gift cards
ParentalDelay			5	# length of time between deposits of funds
NumCouriers				1	# maximum number of couriers in the pool



1. We test the edge case where the student finishes before the watcard
future is filled. To do this, we use the base soda.config config
provided in the assignment and make the following modifications:

NumStudents 1
MaxPurchases 1
ParentalDelay 100

Let the config file with these modifications be 1.config
We run the program with

./soda 1.config 1 1

For the sake of brevity, the first few lines of output are:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,1    S2      S2      S2      S
                C0,5    R0      S
                        R1              G6                                      t0,5
                W       R2                      V0
        D2              N0,0
        F               N0,1    P6              V1
                                d0,6
                                U0,14
                        N0,2    D0,0    P       V2      r
                        N0,0    P5      G5      V0      R
                                d1,5
                                U1,15
                                D1,0    P                       r
                                P6      G6      G1,0    B1,0    R

and the last few are:
                                d1,7
D0,2                            D1,7                    R       r               T0,5
                                F       F       F       F       R
D0,3            F       F                                       F       F       F
F
***********************

This case is a single student, whose giftcard becomes available much earlier than
its watcard, meaning it will perform a single purchase with the giftcard 
then look to terminate. However, the student does not terminate despite finishing
all purchases and instead waits for the courier to fill its watcard future before
terminating.

=======================================

2. We test the edge case where the giftcard future is completed after the student
terminates. We define 2.config again off of soda.config with the following changes:

NumStudents 1
MaxPurchases 1
GroupoffDelay 100

This means the student will complete its single purchase with the watcard before the
giftcard is available. We decide that the student should wait for the giftcard in this
case, and be responsible for cleaning it up.

We run the case with:
./soda 2.config 1 1

and for the sake of brevity, the first few lines are:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,1    S2      S2      S2      S
                C0,5    R0      S
D0,3                    R1              G6                                      t0,5
                W       R2                      V0
D0,2                    N0,0                                                    T0,5
D0,3                    N0,1    P6              V1
                                d0,6
                                U0,14
                        N0,2    D0,0    P       V2      r
D0,3                    N0,0            G5      V0      R
D0,3                            P5
                                d1,5
                                U1,15
                                D1,0    P                       r
D0,1                            P6      G6      B1,3    B1,0    R
                                d2,6
                                U2,14

and the last few are:
D0,1                            D0,4    G6              r               R
                                d1,4
                                U1,1
                                D1,4                    R       r
D0,3    D2                                      F               R
D0,3    F                       F
D0,2                                    F               F       F
D0,2                    F                                               F
D0,1            F                                                               F
D0,3
D0,1
F
***********************

Here we see that while the student is done all purchases and could have
exited, it instead waits for groupoff to deliver the card to the future. 
Then, it cleans up this giftcard so there are no memory leaks.

=======================================

3. Multiple students, one courier, and one vending machine. This is a general test
to see how the single courier and vending machine handle the load from multiple
requests, and if WATCardOffice can correctly orchestrate multiple incoming jobs.

We make the following changes:
NumStudents 3
MaxPurchases 4
NumVendingMachines 1

Running with ./soda 3.config 1 1
We see that the output is:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Stud2   Mach0   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,4    S1,4    S1,4    S2      S
                C0,5    R0      S               V0
D2,3            W       N0,0            G6              V0                      t0,5
                C1,5    N1,0                                    V0
D0,2            C2,5    N2,0    P6
                                d0,6
                                U0,14
D2,3                            D0,0    P                               r
D2,3    D2                      P5      G5                      G1,0    R
                                d0,5    P                               B1,0
                                U0,10
D2,3                            D0,0    G6                              r
                                P6                                      R
                                d0,6
                                U0,5
D0,1    D2                      D0,1    P                               r
D0,2                                    G8              a1,2            R       T0,5
                                P8                                      A
        D2      W               d0,8    P       B1,3                            t1,5

where the program behaves reasonably. We note in particular that
vending machine avoids potential starvation by giving priority to inventory
and restocking calls from the truck, so that buy calls from the students
do not cause them to loop indefinitely due to the one machine constantly being
out of stock.

=======================================

4. Students should busy wait because of slow restocking.

We perform the modifications:
NumVendingMachines 1
MaxStockPerFlavour 1
TimeBetweenShipments 100

The output of running ./soda 4.config 1 1 is:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,4    S1,4    S2      S
                C0,5    R0      S               V0
D1,3            W       N0,0                            V0              t0,5
D0,2            C1,5    N1,0
D1,3    D2
D1,3                    N1,0                            V0
D0,3                    N1,0                            V0              T0,5
        D2              N1,0                            V0
        F                                                               t1,5
D1,1            W       N0,0                    V0                      T1,5
D1,2                    N0,0                    V0      V0
D1,3                    N1,0                    V0
D1,2                    N0,0                            V0
D0,3                    N1,0                    V0

and we see that the two students are busy waiting for the vending machine to be
restocked.

=======================================

5. Soda cost greater than 5. In this case, interesting things could happen when
the student runs out of funds. They would first request a new WATCard with sufficient
funds 5+sodaCost, but the courier may lose this watcard. This results in student
requesting another watcard with only 5 balance, which would again lead to an insufficient
funds exception. This may happen indefinitely, although highly unlikely.

We simply perform the following change to the original config:
SodaCost 10

We run the code with ./soda 5.config 1 1
The critical section of the output is:

D0,2                            D2,6    P                                       r       T0,15
                                d0,6
                                D0,6                            r               R       t1,15
                                d1,6    G6      A1,20                                   L1
                W                               X       L       R       A
D1,2            C1,5            D1,4                                    r               t1,5
D0,1            W                               B1,10                   R               T1,5
D0,3            T1,15           P6              A1,10                   B1,4            t1,15

where the rightmost column corresponds to the courier. We see that the
courier first tries to transfer 15 (which is 5+sodaCost) to the watcard,
loses the watcard, so ends up creating a new watcard with balance 5. However,
this is not enough to purchase the soda so it transfers 15 again, which is what we would expect.

=======================================

6. Multiple couriers blocking. In this case, we greatly increase the parent
delay and create multiple couriers, so we can see the behavior when multiple
such couriers are blocked at once and whether watcardoffice can orchestrate
them correctly.

We make the changes:
ParentalDelay 50
NumCouriers 5

The start of the output is:
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0   Cour1   Cour2   Cour3   Cour4
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,4    S1,4    S2      S2      S2      S       S       S       S       S
                C0,5    R0      S
                        R1              G6                                              t0,5
                W       R2
                C1,5    N0,0                    V0      V1                                      t1,5

which is expected since we would dispatch one courier for each student's call to 
create a watcard. In the middle of the output, we have:

                                W                                       R
                                P5
                                d2,5
D1,3                            D2,5    P                                       r               T1,5
                                d0,5
                                D0,5    G10                     r               R

which shows that the courier returns immediately once the balance is filled, which is
what we would expect.

=======================================

7. Truck should not keep leftovers. To test this, we can modify the config:
MaxStockPerFlavour 1

We run this with ./soda 7.config 1 1.
A part of the output is:

                                P6                      X       A               R
D1,3                            d0,6    P       G1,0            B1,0
                                D0,5    G8                      r
                                d1,5
D1,2                            D1,4                            R       r
                                d2,4
                                U2,1
                                D2,4                    a1,2            R       r
D0,3                                            A1,3    X       A               R
                                P8              X               A
D0,1                            d0,8    P               a1,2    A
D0,3                            D0,8    G9                      r

and we note the truck (the column with P6), ends its delivery run with 4 leftover
sodas, but on the next delivery run (P8), it does not keep any of the old bottles

=======================================

8. Running with multiple processors. In this case, we run the default config
but with two processors

We run this with ./soda soda.config 1 2

We verify that the output still looks reasonable and is reasonably distinct from
the single processor case:

Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Mach0   Mach1   Mach2   Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S               S       S1,4    S1,4    S2      S2      S2      S
                C0,5    R0      S
D1,3                    R1              G6                                              t0,5
D0,2            W       R2
                C1,5    N0,0                    V0      V1
D1,3                    N1,1    P6
D1,3                            d0,6    P
        D2                      U0,14                           r
D0,3                            D0,0    G5                      R                       T0,5
                                                                                        t1,5
D1,1            W               P5              B1,3            B1,0                    T1,5